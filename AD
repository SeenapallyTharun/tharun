{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":30721,"status":"ok","timestamp":1735619937505,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"},"user_tz":-330},"id":"ZqXDwx7L70Bn","outputId":"9a632052-2150-4421-e2e9-436d38bc330a"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":341,"status":"ok","timestamp":1735620389912,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"},"user_tz":-330},"id":"Z7ZucFN5BP6U","outputId":"56133ed8-777f-49c5-f2d6-29abbfe922fb"},"outputs":[{"data":{"text/plain":["[[6, 7], [4, 5]]"]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["import pandas as pd\n","l1 = [6,7]\n","l2 = [4,5]\n","marks = [l1,l2]\n","marks"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":125},"executionInfo":{"elapsed":358,"status":"ok","timestamp":1735621009856,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"},"user_tz":-330},"id":"1iyluQxJDd_H","outputId":"e4b25f15-b508-4841-c9c7-cc5e84f92777"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"df\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Bio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 4,\n        \"max\": 6,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          4,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Phy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 5,\n        \"max\": 7,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          5,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"df"},"text/html":["\n","  <div id=\"df-40a89082-6fa6-4deb-acb7-0ba4a646c835\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Bio</th>\n","      <th>Phy</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Jc</th>\n","      <td>6</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>Jayesh</th>\n","      <td>4</td>\n","      <td>5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-40a89082-6fa6-4deb-acb7-0ba4a646c835')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-40a89082-6fa6-4deb-acb7-0ba4a646c835 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-40a89082-6fa6-4deb-acb7-0ba4a646c835');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1ffa274f-fc12-4bab-b559-c2434b6924bf\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1ffa274f-fc12-4bab-b559-c2434b6924bf')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1ffa274f-fc12-4bab-b559-c2434b6924bf button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_2bc7f537-3d08-496f-9f31-11ed1800db0e\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_2bc7f537-3d08-496f-9f31-11ed1800db0e button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["        Bio  Phy\n","Jc        6    7\n","Jayesh    4    5"]},"execution_count":10,"metadata":{},"output_type":"execute_result"}],"source":["df = pd.DataFrame(marks,columns=['Bio','Phy'],index=['Jc','Jayesh'])\n","df"]},{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"id":"YT_MUUvCFsLn"},"outputs":[],"source":["csvf = df.to_csv('/content/drive/MyDrive/m1week1/marks.csv')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":611,"status":"ok","timestamp":1735807998108,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"},"user_tz":-330},"id":"fejDc6b2MTLe","outputId":"842b5b12-9a8d-4d4a-821c-84c63762ad8f"},"outputs":[{"name":"stdout","output_type":"stream","text":["Marks of Students:\n","Jayesh    85\n","J         92\n","Kjc       88\n","Jc        95\n","dtype: int64\n"]}],"source":["import pandas as pd\n","\n","data = {\n","    'Jayesh': 85,\n","    'J': 92,\n","    'Kjc': 88,\n","    'Jc': 95\n","}\n","\n","marks_series = pd.Series(data)\n","\n","print(\"Marks of Students:\")\n","print(marks_series)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":823,"status":"ok","timestamp":1735808173005,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"},"user_tz":-330},"id":"hcWmC5AiOWU8","outputId":"e32f08a8-93f8-4a5b-8fec-905ccbafa990"},"outputs":[{"name":"stdout","output_type":"stream","text":["Student Grades:\n","\n","   Student  Marks Grade\n","0    Alice     85     B\n","1      Bob     78     C\n","2  Charlie     92     A\n","3    David     88     B\n","4      Eva     95     A\n"]}],"source":["import pandas as pd\n","\n","data = {\n","    'Student': ['Alice', 'Bob', 'Charlie', 'David', 'Eva'],\n","    'Marks': [85, 78, 92, 88, 95]\n","}\n","\n","df = pd.DataFrame(data)\n","\n","def assign_grade(marks):\n","    if marks >= 90:\n","        return 'A'\n","    elif marks >= 80:\n","        return 'B'\n","    elif marks >= 70:\n","        return 'C'\n","    elif marks >= 60:\n","        return 'D'\n","    else:\n","        return 'F'\n","\n","df['Grade'] = df['Marks'].apply(assign_grade)\n","\n","print(\"Student Grades:\\n\")\n","print(df)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":632,"status":"ok","timestamp":1736234703448,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"},"user_tz":-330},"id":"cQH20KptlUJ1","outputId":"30de4d6f-b701-4477-8abb-ee1bbe3176f1"},"outputs":[{"name":"stdout","output_type":"stream","text":["Student ID: 1, Name: google, Age: 14, work_experience: 10\n","Student ID: 2, Name: deloite, Age: 20, work_experience: 15\n","Student ID: 3, Name: Jayesh, Age: 18, work_experience: 20\n","Student ID: 4, Name: JC, Age: 19, work_experience: 25\n"]}],"source":["students = {\n","    1: {\"name\": \"google\", \"age\": 14, \"experience\": 10},\n","    2: {\"name\": \"deloite\", \"age\": 20, \"experience\": 15},\n","    3: {\"name\": \"Jayesh\", \"age\": 18, \"experience\": 20},\n","    4: {\"name\": \"JC\", \"age\": 19, \"experience\": 25},\n","\n","}\n","\n","for student_id, details,  in students.items():\n","    print(f\"Student ID: {student_id}, Name: {details['name']}, Age: {details['age']}, work_experience: {details['experience']}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9177,"status":"ok","timestamp":1736236186526,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"},"user_tz":-330},"id":"GZY_hpbat5JN","outputId":"53cd599f-96d0-4bc1-f9b7-f1f182b38cb1"},"outputs":[{"name":"stdout","output_type":"stream","text":["Enter a password: Jc231206@sgh\n","Password is valid.\n"]}],"source":["def validate_password(password):\n","    if len(password) >= 8:\n","        if any(char.isdigit() for char in password):\n","            if any(char.isupper() for char in password):\n","                if any(char.islower() for char in password):\n","                  if any(char in '!@#$%^&*()' for char in password):\n","                    if any(char.isalpha() for char in password):\n","                      if any(char.isalnum() for char in password):\n","                        return True\n","    return False\n","\n","password = input(\"Enter a password: \")\n","\n","if validate_password(password):\n","    print(\"Password is valid.\")\n","else:\n","    print(\"Password is not valid.\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"upir_TuVCGTU","executionInfo":{"status":"ok","timestamp":1736242900248,"user_tz":-330,"elapsed":23622,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"97254386-0a21-479f-bfee-7fe32b767341"},"outputs":[{"output_type":"stream","name":"stdout","text":["who are Prof Hackers\n","Jayesh and Sunil\n"]}],"source":["Question = str(input())\n","if (Question == \"who are Prof Hackers\"):\n","      print(\"Jayesh and Sunil\")\n","else:\n","      print(\"Learn from them\")\n"]},{"cell_type":"code","source":["import pandas as pd\n","screen_time = [2,3,4,7]\n","sleep_hours = [4,7,10,11]\n","stu_name = [\"Jayesh\",\"Jc\",\"Sunil\",\"Tarun\"]\n","dict1 = {\n","  \"screen_time\":screen_time,\n","  \"sleep_hours\":sleep_hours,\n","  \"stu_name\":stu_name\n","}\n","print(dict1)\n","df = pd.DataFrame(dict1)\n","print(df)\n"],"metadata":{"id":"c3uxRAXtHXc2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736314428768,"user_tz":-330,"elapsed":760,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"824d7ac5-cd8c-48c3-c439-1bea1f3af091"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'screen_time': [2, 3, 4, 7], 'sleep_hours': [4, 7, 10, 11], 'stu_name': ['Jayesh', 'Jc', 'Sunil', 'Tarun']}\n","   screen_time  sleep_hours stu_name\n","0            2            4   Jayesh\n","1            3            7       Jc\n","2            4           10    Sunil\n","3            7           11    Tarun\n"]}]},{"cell_type":"code","source":["#list comprehension\n","list = [1,2,3,4]\n","res = [i+1 for i in range(1,20)]\n","print(res)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kB6moiR_b7Iw","executionInfo":{"status":"ok","timestamp":1736315044146,"user_tz":-330,"elapsed":540,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"1da0f9ed-d75f-4833-e9ca-abcf13d8a422"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n"]}]},{"cell_type":"code","source":["dict1 = {\"a\":12,\"abc\":1234,\"dfe\":234}\n","result = {key:value for key,value in dict1.items()}\n","print(result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7mpGjZGmkGSN","executionInfo":{"status":"ok","timestamp":1736317212078,"user_tz":-330,"elapsed":482,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"e49842fb-580d-45c8-a535-07b16b6513c8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'a': 12, 'abc': 1234, 'dfe': 234}\n"]}]},{"cell_type":"code","source":["for i in range(1,10):\n","  if i%2==0:\n","    print(i)"],"metadata":{"id":"Llew4_hVkiAV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736400813640,"user_tz":-330,"elapsed":1496,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"df72864f-690c-4493-dc2b-f711be0fe2ba"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2\n","4\n","6\n","8\n"]}]},{"cell_type":"code","source":["def modify_numbers(numbers):\n","  for number in iter(numbers):\n","    if number > 5:\n","      number += 1\n","      print(number)\n","\n","\n","my_numbers = [1, 2, 3, 4, 5, 6]\n","modify_numbers(my_numbers)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qJECAUBykf43","executionInfo":{"status":"ok","timestamp":1736401151277,"user_tz":-330,"elapsed":381,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"42d09c2f-7d05-45a1-866b-436874761e35"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["7\n"]}]},{"cell_type":"code","source":["string = \"Do what i will do\"\n","for word in string.split():\n","  if len(word)  % 2 == 0:\n","    print(word)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q9zc8XwGflCB","executionInfo":{"status":"ok","timestamp":1736569586295,"user_tz":-330,"elapsed":437,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"0f4051f0-c97a-4722-828c-3d29b1e6409c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Do\n","what\n","will\n","do\n"]}]},{"cell_type":"code","source":["string = \"Do what i say to the world\"\n","for word in string.split():\n","  if len(word) > 3 :\n","    print(word[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f90PYJvNnzlr","executionInfo":{"status":"ok","timestamp":1736570118943,"user_tz":-330,"elapsed":363,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"2e719f95-a192-4970-af88-2490ccdfdf7c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["w\n","w\n"]}]},{"cell_type":"code","source":["string = \"Do what i will do\"\n","my_list = list(string.split())\n","print(my_list)\n","print(string[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RSAMqFnhpSnS","executionInfo":{"status":"ok","timestamp":1736571017380,"user_tz":-330,"elapsed":558,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"a88aac67-5dd0-4cb5-a63f-65e60af05869"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['Do', 'what', 'i', 'will', 'do']\n","D\n"]}]},{"cell_type":"code","source":["string = \"welcome to python to lab\"\n","my_list = list(string.split())\n","for i in my_list :\n","  if i == \"to\":\n","    print(i)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"40TzNX19rJfw","executionInfo":{"status":"ok","timestamp":1736571361799,"user_tz":-330,"elapsed":623,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"cd31c2f0-e099-4cc6-fd42-c9048941fb34"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["to\n","to\n"]}]},{"cell_type":"code","source":["from google.colab import files\n","import pandas as pd\n","uploaded = files.upload()\n","aaa = list(uploaded.keys())[0]\n","df = pd.read_csv(aaa)\n","df"],"metadata":{"id":"e422M7t_uKud","colab":{"base_uri":"https://localhost:8080/","height":777},"executionInfo":{"status":"ok","timestamp":1737090014639,"user_tz":-330,"elapsed":42964,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"194c2bf4-0e4e-48cb-8564-8a678a1793dc"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-9fb18ab9-815e-4190-86bc-c8a0be1c9bbc\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-9fb18ab9-815e-4190-86bc-c8a0be1c9bbc\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving customer.csv to customer.csv\n"]},{"output_type":"execute_result","data":{"text/plain":["    Index      Customer Id First Name Last Name  \\\n","0       1  DD37Cf93aecA6Dc     Sheryl    Baxter   \n","1       2  1Ef7b82A4CAAD10    Preston    Lozano   \n","2       3  6F94879bDAfE5a6        Roy     Berry   \n","3       4  5Cef8BFA16c5e3c      Linda     Olsen   \n","4       5  053d585Ab6b3159     Joanna    Bender   \n","..    ...              ...        ...       ...   \n","95     96  cb8E23e48d22Eae       Karl     Greer   \n","96     97  CeD220bdAaCfaDf       Lynn  Atkinson   \n","97     98  28CDbC0dFe4b1Db       Fred    Guerra   \n","98     99  c23d1D9EE8DEB0A     Yvonne    Farmer   \n","99    100  2354a0E336A91A1   Clarence    Haynes   \n","\n","                            Company               City  \\\n","0                   Rasmussen Group       East Leonard   \n","1                       Vega-Gentry  East Jimmychester   \n","2                     Murillo-Perry      Isabelborough   \n","3   Dominguez, Mcmillan and Donovan         Bensonview   \n","4          Martin, Lang and Andrade     West Priscilla   \n","..                              ...                ...   \n","95                        Carey LLC       East Richard   \n","96            Ware, Burns and Oneal       New Bradview   \n","97                    Schmitt-Jones         Ortegaland   \n","98               Fitzgerald-Harrell    Lake Elijahview   \n","99               Le, Nash and Cross          Judymouth   \n","\n","                       Country                 Phone 1  \\\n","0                        Chile            229.077.5154   \n","1                     Djibouti              5153435776   \n","2          Antigua and Barbuda                   -1199   \n","3           Dominican Republic  001-808-617-6467x12895   \n","4   Slovakia (Slovak Republic)  001-234-203-0635x76146   \n","..                         ...                     ...   \n","95                      Guyana     (188)169-1674x58692   \n","96                   Sri Lanka                   -3769   \n","97             Solomon Islands    +1-753-067-8419x7170   \n","98                       Aruba           (530)311-9786   \n","99                    Honduras           (753)813-6941   \n","\n","                   Phone 2                           Email Subscription Date  \\\n","0         397.884.0519x718        zunigavanessa@smith.info        24-08-2020   \n","1         686-620-1820x944                 vmata@colon.com        23-04-2021   \n","2      (496)978-3969x58947             beckycarr@hogan.com        25-03-2020   \n","3                    -9892     stanleyblackwell@benson.org        02-06-2020   \n","4    001-199-446-3860x3486         colinalvarado@miles.net        17-04-2021   \n","..                     ...                             ...               ...   \n","95    001-841-293-3519x614                hhart@jensen.com        30-01-2022   \n","96            605.413.3198               vkemp@ferrell.com        10-07-2021   \n","97   +1-632-666-7507x92121                swagner@kane.org        18-09-2021   \n","98  001-869-452-0943x12424  mccarthystephen@horn-green.biz        11-08-2021   \n","99            783.639.1472          colleen91@faulkner.biz        11-03-2020   \n","\n","                              Website  \n","0          http://www.stephenson.com/  \n","1               http://www.hobbs.com/  \n","2            http://www.lawrence.com/  \n","3          http://www.good-lyons.com/  \n","4         https://goodwin-ingram.com/  \n","..                                ...  \n","95            http://hayes-perez.com/  \n","96         https://novak-allison.com/  \n","97              https://www.ross.com/  \n","98               http://watkins.info/  \n","99  http://www.hatfield-saunders.net/  \n","\n","[100 rows x 12 columns]"],"text/html":["\n","  <div id=\"df-3e5193d1-18e5-4402-9d8f-1eab60584a31\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Index</th>\n","      <th>Customer Id</th>\n","      <th>First Name</th>\n","      <th>Last Name</th>\n","      <th>Company</th>\n","      <th>City</th>\n","      <th>Country</th>\n","      <th>Phone 1</th>\n","      <th>Phone 2</th>\n","      <th>Email</th>\n","      <th>Subscription Date</th>\n","      <th>Website</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>DD37Cf93aecA6Dc</td>\n","      <td>Sheryl</td>\n","      <td>Baxter</td>\n","      <td>Rasmussen Group</td>\n","      <td>East Leonard</td>\n","      <td>Chile</td>\n","      <td>229.077.5154</td>\n","      <td>397.884.0519x718</td>\n","      <td>zunigavanessa@smith.info</td>\n","      <td>24-08-2020</td>\n","      <td>http://www.stephenson.com/</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1Ef7b82A4CAAD10</td>\n","      <td>Preston</td>\n","      <td>Lozano</td>\n","      <td>Vega-Gentry</td>\n","      <td>East Jimmychester</td>\n","      <td>Djibouti</td>\n","      <td>5153435776</td>\n","      <td>686-620-1820x944</td>\n","      <td>vmata@colon.com</td>\n","      <td>23-04-2021</td>\n","      <td>http://www.hobbs.com/</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>6F94879bDAfE5a6</td>\n","      <td>Roy</td>\n","      <td>Berry</td>\n","      <td>Murillo-Perry</td>\n","      <td>Isabelborough</td>\n","      <td>Antigua and Barbuda</td>\n","      <td>-1199</td>\n","      <td>(496)978-3969x58947</td>\n","      <td>beckycarr@hogan.com</td>\n","      <td>25-03-2020</td>\n","      <td>http://www.lawrence.com/</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>5Cef8BFA16c5e3c</td>\n","      <td>Linda</td>\n","      <td>Olsen</td>\n","      <td>Dominguez, Mcmillan and Donovan</td>\n","      <td>Bensonview</td>\n","      <td>Dominican Republic</td>\n","      <td>001-808-617-6467x12895</td>\n","      <td>-9892</td>\n","      <td>stanleyblackwell@benson.org</td>\n","      <td>02-06-2020</td>\n","      <td>http://www.good-lyons.com/</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>053d585Ab6b3159</td>\n","      <td>Joanna</td>\n","      <td>Bender</td>\n","      <td>Martin, Lang and Andrade</td>\n","      <td>West Priscilla</td>\n","      <td>Slovakia (Slovak Republic)</td>\n","      <td>001-234-203-0635x76146</td>\n","      <td>001-199-446-3860x3486</td>\n","      <td>colinalvarado@miles.net</td>\n","      <td>17-04-2021</td>\n","      <td>https://goodwin-ingram.com/</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>96</td>\n","      <td>cb8E23e48d22Eae</td>\n","      <td>Karl</td>\n","      <td>Greer</td>\n","      <td>Carey LLC</td>\n","      <td>East Richard</td>\n","      <td>Guyana</td>\n","      <td>(188)169-1674x58692</td>\n","      <td>001-841-293-3519x614</td>\n","      <td>hhart@jensen.com</td>\n","      <td>30-01-2022</td>\n","      <td>http://hayes-perez.com/</td>\n","    </tr>\n","    <tr>\n","      <th>96</th>\n","      <td>97</td>\n","      <td>CeD220bdAaCfaDf</td>\n","      <td>Lynn</td>\n","      <td>Atkinson</td>\n","      <td>Ware, Burns and Oneal</td>\n","      <td>New Bradview</td>\n","      <td>Sri Lanka</td>\n","      <td>-3769</td>\n","      <td>605.413.3198</td>\n","      <td>vkemp@ferrell.com</td>\n","      <td>10-07-2021</td>\n","      <td>https://novak-allison.com/</td>\n","    </tr>\n","    <tr>\n","      <th>97</th>\n","      <td>98</td>\n","      <td>28CDbC0dFe4b1Db</td>\n","      <td>Fred</td>\n","      <td>Guerra</td>\n","      <td>Schmitt-Jones</td>\n","      <td>Ortegaland</td>\n","      <td>Solomon Islands</td>\n","      <td>+1-753-067-8419x7170</td>\n","      <td>+1-632-666-7507x92121</td>\n","      <td>swagner@kane.org</td>\n","      <td>18-09-2021</td>\n","      <td>https://www.ross.com/</td>\n","    </tr>\n","    <tr>\n","      <th>98</th>\n","      <td>99</td>\n","      <td>c23d1D9EE8DEB0A</td>\n","      <td>Yvonne</td>\n","      <td>Farmer</td>\n","      <td>Fitzgerald-Harrell</td>\n","      <td>Lake Elijahview</td>\n","      <td>Aruba</td>\n","      <td>(530)311-9786</td>\n","      <td>001-869-452-0943x12424</td>\n","      <td>mccarthystephen@horn-green.biz</td>\n","      <td>11-08-2021</td>\n","      <td>http://watkins.info/</td>\n","    </tr>\n","    <tr>\n","      <th>99</th>\n","      <td>100</td>\n","      <td>2354a0E336A91A1</td>\n","      <td>Clarence</td>\n","      <td>Haynes</td>\n","      <td>Le, Nash and Cross</td>\n","      <td>Judymouth</td>\n","      <td>Honduras</td>\n","      <td>(753)813-6941</td>\n","      <td>783.639.1472</td>\n","      <td>colleen91@faulkner.biz</td>\n","      <td>11-03-2020</td>\n","      <td>http://www.hatfield-saunders.net/</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>100 rows × 12 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3e5193d1-18e5-4402-9d8f-1eab60584a31')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3e5193d1-18e5-4402-9d8f-1eab60584a31 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3e5193d1-18e5-4402-9d8f-1eab60584a31');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0e155162-0f6e-40ea-82e6-149288251793\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0e155162-0f6e-40ea-82e6-149288251793')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0e155162-0f6e-40ea-82e6-149288251793 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_4c25b260-e813-482e-9d5b-05c7ba0fe059\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_4c25b260-e813-482e-9d5b-05c7ba0fe059 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 100,\n  \"fields\": [\n    {\n      \"column\": \"Index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29,\n        \"min\": 1,\n        \"max\": 100,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          84,\n          54,\n          71\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Customer Id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"78C06E9b6B3DF20\",\n          \"c09952De6Cda8aA\",\n          \"CBCd2Ac8E3eBDF9\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"First Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 93,\n        \"samples\": [\n          \"Luis\",\n          \"Shane\",\n          \"Kathy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Last Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 97,\n        \"samples\": [\n          \"Hutchinson\",\n          \"Dunn\",\n          \"Atkinson\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Company\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 99,\n        \"samples\": [\n          \"Caldwell Group\",\n          \"Monroe PLC\",\n          \"Ware, Burns and Oneal\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"South Joshuashire\",\n          \"New Deborah\",\n          \"Nicolasfort\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 85,\n        \"samples\": [\n          \"Bhutan\",\n          \"Chile\",\n          \"Dominica\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Phone 1\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"8275702958\",\n          \"001-622-948-3641x24810\",\n          \"078-900-4760x76668\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Phone 2\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"(804)842-4715\",\n          \"001-731-168-2893x8891\",\n          \"414-112-8700x68751\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Email\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"justinwalters@jimenez.com\",\n          \"clinton85@colon-arias.org\",\n          \"lee48@manning.com\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Subscription Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 96,\n        \"samples\": [\n          \"18-02-2020\",\n          \"12-09-2021\",\n          \"21-10-2020\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Website\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"http://www.garner-oliver.com/\",\n          \"https://kim.com/\",\n          \"https://ramsey.org/\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["df.iloc[[7,10,25,38],2:12:8]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":174},"id":"6fGKKy_2pDMq","executionInfo":{"status":"ok","timestamp":1737091263986,"user_tz":-330,"elapsed":378,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"5ae6806e-b059-40c8-cf59-72230413d0a2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   First Name Subscription Date\n","7       Brett        12-04-2021\n","10       Carl        20-10-2021\n","25     Marcus        24-05-2022\n","38      Bruce        22-10-2021"],"text/html":["\n","  <div id=\"df-f2781d16-ae5c-4bc0-91b1-50b5888c5d27\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>First Name</th>\n","      <th>Subscription Date</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>7</th>\n","      <td>Brett</td>\n","      <td>12-04-2021</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>Carl</td>\n","      <td>20-10-2021</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>Marcus</td>\n","      <td>24-05-2022</td>\n","    </tr>\n","    <tr>\n","      <th>38</th>\n","      <td>Bruce</td>\n","      <td>22-10-2021</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f2781d16-ae5c-4bc0-91b1-50b5888c5d27')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f2781d16-ae5c-4bc0-91b1-50b5888c5d27 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f2781d16-ae5c-4bc0-91b1-50b5888c5d27');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ab648a50-cd9e-4b32-970d-bd8fddd197e5\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ab648a50-cd9e-4b32-970d-bd8fddd197e5')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ab648a50-cd9e-4b32-970d-bd8fddd197e5 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"First Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Carl\",\n          \"Bruce\",\n          \"Brett\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Subscription Date\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"20-10-2021\",\n          \"22-10-2021\",\n          \"12-04-2021\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"mpOYmmsDu4rF","executionInfo":{"status":"ok","timestamp":1737091690321,"user_tz":-330,"elapsed":391,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"98635c66-7357-4598-b247-8fe199bba369"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            Index\n","count  100.000000\n","mean    50.500000\n","std     29.011492\n","min      1.000000\n","25%     25.750000\n","50%     50.500000\n","75%     75.250000\n","max    100.000000"],"text/html":["\n","  <div id=\"df-5625b5b8-d2c3-41bc-b9b6-85bc105f5b96\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Index</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>100.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>50.500000</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>29.011492</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>25.750000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>50.500000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>75.250000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>100.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5625b5b8-d2c3-41bc-b9b6-85bc105f5b96')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5625b5b8-d2c3-41bc-b9b6-85bc105f5b96 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5625b5b8-d2c3-41bc-b9b6-85bc105f5b96');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-82df5ddd-fc83-4555-bc22-ae22bac7ae8f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-82df5ddd-fc83-4555-bc22-ae22bac7ae8f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-82df5ddd-fc83-4555-bc22-ae22bac7ae8f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35.736237144555226,\n        \"min\": 1.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          100.0,\n          50.5,\n          75.25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["df.head(10)\n","df.iloc[1:50,1:5]\n","data = df['Company'] == 'Vega-Gentry'\n","jc = df['First Name'] == 'Maxwell'\n","data\n","jc"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":458},"id":"lo5C_ueDxnge","executionInfo":{"status":"ok","timestamp":1737092651336,"user_tz":-330,"elapsed":439,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"88c9c3f6-3533-4001-aa8a-7031d641f0ba"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0     False\n","1     False\n","2     False\n","3     False\n","4     False\n","      ...  \n","95    False\n","96    False\n","97    False\n","98    False\n","99    False\n","Name: First Name, Length: 100, dtype: bool"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>First Name</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>96</th>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>97</th>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>98</th>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>99</th>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>100 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> bool</label>"]},"metadata":{},"execution_count":49}]},{"cell_type":"code","source":["df.drop('Company',axis=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":652},"id":"35yLZmkdz-QZ","executionInfo":{"status":"ok","timestamp":1737093199955,"user_tz":-330,"elapsed":627,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"c09723d6-dd90-4fc6-d5ed-c30bc17803b1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Index      Customer Id First Name Last Name               City  \\\n","0       1  DD37Cf93aecA6Dc     Sheryl    Baxter       East Leonard   \n","1       2  1Ef7b82A4CAAD10    Preston    Lozano  East Jimmychester   \n","2       3  6F94879bDAfE5a6        Roy     Berry      Isabelborough   \n","3       4  5Cef8BFA16c5e3c      Linda     Olsen         Bensonview   \n","4       5  053d585Ab6b3159     Joanna    Bender     West Priscilla   \n","..    ...              ...        ...       ...                ...   \n","95     96  cb8E23e48d22Eae       Karl     Greer       East Richard   \n","96     97  CeD220bdAaCfaDf       Lynn  Atkinson       New Bradview   \n","97     98  28CDbC0dFe4b1Db       Fred    Guerra         Ortegaland   \n","98     99  c23d1D9EE8DEB0A     Yvonne    Farmer    Lake Elijahview   \n","99    100  2354a0E336A91A1   Clarence    Haynes          Judymouth   \n","\n","                       Country                 Phone 1  \\\n","0                        Chile            229.077.5154   \n","1                     Djibouti              5153435776   \n","2          Antigua and Barbuda                   -1199   \n","3           Dominican Republic  001-808-617-6467x12895   \n","4   Slovakia (Slovak Republic)  001-234-203-0635x76146   \n","..                         ...                     ...   \n","95                      Guyana     (188)169-1674x58692   \n","96                   Sri Lanka                   -3769   \n","97             Solomon Islands    +1-753-067-8419x7170   \n","98                       Aruba           (530)311-9786   \n","99                    Honduras           (753)813-6941   \n","\n","                   Phone 2                           Email Subscription Date  \\\n","0         397.884.0519x718        zunigavanessa@smith.info        24-08-2020   \n","1         686-620-1820x944                 vmata@colon.com        23-04-2021   \n","2      (496)978-3969x58947             beckycarr@hogan.com        25-03-2020   \n","3                    -9892     stanleyblackwell@benson.org        02-06-2020   \n","4    001-199-446-3860x3486         colinalvarado@miles.net        17-04-2021   \n","..                     ...                             ...               ...   \n","95    001-841-293-3519x614                hhart@jensen.com        30-01-2022   \n","96            605.413.3198               vkemp@ferrell.com        10-07-2021   \n","97   +1-632-666-7507x92121                swagner@kane.org        18-09-2021   \n","98  001-869-452-0943x12424  mccarthystephen@horn-green.biz        11-08-2021   \n","99            783.639.1472          colleen91@faulkner.biz        11-03-2020   \n","\n","                              Website  \n","0          http://www.stephenson.com/  \n","1               http://www.hobbs.com/  \n","2            http://www.lawrence.com/  \n","3          http://www.good-lyons.com/  \n","4         https://goodwin-ingram.com/  \n","..                                ...  \n","95            http://hayes-perez.com/  \n","96         https://novak-allison.com/  \n","97              https://www.ross.com/  \n","98               http://watkins.info/  \n","99  http://www.hatfield-saunders.net/  \n","\n","[100 rows x 11 columns]"],"text/html":["\n","  <div id=\"df-1b236552-1d0d-4700-b317-62d751de01ec\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Index</th>\n","      <th>Customer Id</th>\n","      <th>First Name</th>\n","      <th>Last Name</th>\n","      <th>City</th>\n","      <th>Country</th>\n","      <th>Phone 1</th>\n","      <th>Phone 2</th>\n","      <th>Email</th>\n","      <th>Subscription Date</th>\n","      <th>Website</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>DD37Cf93aecA6Dc</td>\n","      <td>Sheryl</td>\n","      <td>Baxter</td>\n","      <td>East Leonard</td>\n","      <td>Chile</td>\n","      <td>229.077.5154</td>\n","      <td>397.884.0519x718</td>\n","      <td>zunigavanessa@smith.info</td>\n","      <td>24-08-2020</td>\n","      <td>http://www.stephenson.com/</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1Ef7b82A4CAAD10</td>\n","      <td>Preston</td>\n","      <td>Lozano</td>\n","      <td>East Jimmychester</td>\n","      <td>Djibouti</td>\n","      <td>5153435776</td>\n","      <td>686-620-1820x944</td>\n","      <td>vmata@colon.com</td>\n","      <td>23-04-2021</td>\n","      <td>http://www.hobbs.com/</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>6F94879bDAfE5a6</td>\n","      <td>Roy</td>\n","      <td>Berry</td>\n","      <td>Isabelborough</td>\n","      <td>Antigua and Barbuda</td>\n","      <td>-1199</td>\n","      <td>(496)978-3969x58947</td>\n","      <td>beckycarr@hogan.com</td>\n","      <td>25-03-2020</td>\n","      <td>http://www.lawrence.com/</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>5Cef8BFA16c5e3c</td>\n","      <td>Linda</td>\n","      <td>Olsen</td>\n","      <td>Bensonview</td>\n","      <td>Dominican Republic</td>\n","      <td>001-808-617-6467x12895</td>\n","      <td>-9892</td>\n","      <td>stanleyblackwell@benson.org</td>\n","      <td>02-06-2020</td>\n","      <td>http://www.good-lyons.com/</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>053d585Ab6b3159</td>\n","      <td>Joanna</td>\n","      <td>Bender</td>\n","      <td>West Priscilla</td>\n","      <td>Slovakia (Slovak Republic)</td>\n","      <td>001-234-203-0635x76146</td>\n","      <td>001-199-446-3860x3486</td>\n","      <td>colinalvarado@miles.net</td>\n","      <td>17-04-2021</td>\n","      <td>https://goodwin-ingram.com/</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>96</td>\n","      <td>cb8E23e48d22Eae</td>\n","      <td>Karl</td>\n","      <td>Greer</td>\n","      <td>East Richard</td>\n","      <td>Guyana</td>\n","      <td>(188)169-1674x58692</td>\n","      <td>001-841-293-3519x614</td>\n","      <td>hhart@jensen.com</td>\n","      <td>30-01-2022</td>\n","      <td>http://hayes-perez.com/</td>\n","    </tr>\n","    <tr>\n","      <th>96</th>\n","      <td>97</td>\n","      <td>CeD220bdAaCfaDf</td>\n","      <td>Lynn</td>\n","      <td>Atkinson</td>\n","      <td>New Bradview</td>\n","      <td>Sri Lanka</td>\n","      <td>-3769</td>\n","      <td>605.413.3198</td>\n","      <td>vkemp@ferrell.com</td>\n","      <td>10-07-2021</td>\n","      <td>https://novak-allison.com/</td>\n","    </tr>\n","    <tr>\n","      <th>97</th>\n","      <td>98</td>\n","      <td>28CDbC0dFe4b1Db</td>\n","      <td>Fred</td>\n","      <td>Guerra</td>\n","      <td>Ortegaland</td>\n","      <td>Solomon Islands</td>\n","      <td>+1-753-067-8419x7170</td>\n","      <td>+1-632-666-7507x92121</td>\n","      <td>swagner@kane.org</td>\n","      <td>18-09-2021</td>\n","      <td>https://www.ross.com/</td>\n","    </tr>\n","    <tr>\n","      <th>98</th>\n","      <td>99</td>\n","      <td>c23d1D9EE8DEB0A</td>\n","      <td>Yvonne</td>\n","      <td>Farmer</td>\n","      <td>Lake Elijahview</td>\n","      <td>Aruba</td>\n","      <td>(530)311-9786</td>\n","      <td>001-869-452-0943x12424</td>\n","      <td>mccarthystephen@horn-green.biz</td>\n","      <td>11-08-2021</td>\n","      <td>http://watkins.info/</td>\n","    </tr>\n","    <tr>\n","      <th>99</th>\n","      <td>100</td>\n","      <td>2354a0E336A91A1</td>\n","      <td>Clarence</td>\n","      <td>Haynes</td>\n","      <td>Judymouth</td>\n","      <td>Honduras</td>\n","      <td>(753)813-6941</td>\n","      <td>783.639.1472</td>\n","      <td>colleen91@faulkner.biz</td>\n","      <td>11-03-2020</td>\n","      <td>http://www.hatfield-saunders.net/</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>100 rows × 11 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1b236552-1d0d-4700-b317-62d751de01ec')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1b236552-1d0d-4700-b317-62d751de01ec button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1b236552-1d0d-4700-b317-62d751de01ec');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-999e6198-3ae8-440c-b02e-2a3fad3a277e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-999e6198-3ae8-440c-b02e-2a3fad3a277e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-999e6198-3ae8-440c-b02e-2a3fad3a277e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 100,\n  \"fields\": [\n    {\n      \"column\": \"Index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29,\n        \"min\": 1,\n        \"max\": 100,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          84,\n          54,\n          71\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Customer Id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"78C06E9b6B3DF20\",\n          \"c09952De6Cda8aA\",\n          \"CBCd2Ac8E3eBDF9\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"First Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 93,\n        \"samples\": [\n          \"Luis\",\n          \"Shane\",\n          \"Kathy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Last Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 97,\n        \"samples\": [\n          \"Hutchinson\",\n          \"Dunn\",\n          \"Atkinson\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"South Joshuashire\",\n          \"New Deborah\",\n          \"Nicolasfort\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 85,\n        \"samples\": [\n          \"Bhutan\",\n          \"Chile\",\n          \"Dominica\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Phone 1\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"8275702958\",\n          \"001-622-948-3641x24810\",\n          \"078-900-4760x76668\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Phone 2\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"(804)842-4715\",\n          \"001-731-168-2893x8891\",\n          \"414-112-8700x68751\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Email\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"justinwalters@jimenez.com\",\n          \"clinton85@colon-arias.org\",\n          \"lee48@manning.com\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Subscription Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 96,\n        \"samples\": [\n          \"18-02-2020\",\n          \"12-09-2021\",\n          \"21-10-2020\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Website\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 100,\n        \"samples\": [\n          \"http://www.garner-oliver.com/\",\n          \"https://kim.com/\",\n          \"https://ramsey.org/\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["df.isnull()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"ABel1fI_0Dq9","executionInfo":{"status":"ok","timestamp":1737093673544,"user_tz":-330,"elapsed":425,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"87182205-7080-4992-8ef7-3a933d2bf54f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Index  Customer Id  First Name  Last Name  Company   City  Country  \\\n","0   False        False       False      False    False  False    False   \n","1   False        False       False      False    False  False    False   \n","2   False        False       False      False    False  False    False   \n","3   False        False       False      False    False  False    False   \n","4   False        False       False      False    False  False    False   \n","..    ...          ...         ...        ...      ...    ...      ...   \n","95  False        False       False      False    False  False    False   \n","96  False        False       False      False    False  False    False   \n","97  False        False       False      False    False  False    False   \n","98  False        False       False      False    False  False    False   \n","99  False        False       False      False    False  False    False   \n","\n","    Phone 1  Phone 2  Email  Subscription Date  Website  \n","0     False    False  False              False    False  \n","1     False    False  False              False    False  \n","2     False    False  False              False    False  \n","3     False    False  False              False    False  \n","4     False    False  False              False    False  \n","..      ...      ...    ...                ...      ...  \n","95    False    False  False              False    False  \n","96    False    False  False              False    False  \n","97    False    False  False              False    False  \n","98    False    False  False              False    False  \n","99    False    False  False              False    False  \n","\n","[100 rows x 12 columns]"],"text/html":["\n","  <div id=\"df-7d03d59b-d6e2-4802-beec-fbaa536a2eb6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Index</th>\n","      <th>Customer Id</th>\n","      <th>First Name</th>\n","      <th>Last Name</th>\n","      <th>Company</th>\n","      <th>City</th>\n","      <th>Country</th>\n","      <th>Phone 1</th>\n","      <th>Phone 2</th>\n","      <th>Email</th>\n","      <th>Subscription Date</th>\n","      <th>Website</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>96</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>97</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>98</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>99</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>100 rows × 12 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7d03d59b-d6e2-4802-beec-fbaa536a2eb6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7d03d59b-d6e2-4802-beec-fbaa536a2eb6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7d03d59b-d6e2-4802-beec-fbaa536a2eb6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6f334ac4-9fd3-4799-8a74-55ff01759c75\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6f334ac4-9fd3-4799-8a74-55ff01759c75')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6f334ac4-9fd3-4799-8a74-55ff01759c75 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 100,\n  \"fields\": [\n    {\n      \"column\": \"Index\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Customer Id\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"First Name\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Last Name\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Company\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Phone 1\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Phone 2\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Email\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Subscription Date\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Website\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":68}]},{"cell_type":"code","source":[],"metadata":{"id":"xrqCcynL5Kvb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","screen_time = [2,3,4,7]\n","sleep_hours = [4,7,10,11]\n","stu_name = [\"Jayesh\",\"Jc\",\"Sunil\",\"Tarun\"]\n","dict1 = {\n","  \"screen_time\":screen_time,\n","  \"sleep_hours\":sleep_hours,\n","  \"stu_name\":stu_name\n","}\n","\n","df = pd.DataFrame(dict1)\n","print(df)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ab6mIIT_ER2x","executionInfo":{"status":"ok","timestamp":1737097329927,"user_tz":-330,"elapsed":408,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"1a273c78-7ac1-40ae-c19f-2b30367b2c10"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   screen_time  sleep_hours stu_name\n","0            2            4   Jayesh\n","1            3            7       Jc\n","2            4           10    Sunil\n","3            7           11    Tarun\n"]}]},{"cell_type":"code","source":["dict1 ={ 'Customer_id':[1,2,3,4,5,6],'Product':['Television','er','evision','Televi','Tesion','Teln']}\n","dict2 ={'Customer_id':[2,4,6,8],'State':['California','California','Texas','Texas']}\n","df1=pd.DataFrame(dict1)\n","df2=pd.DataFrame(dict2)\n","df1,df2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rBasyR6zJnY6","executionInfo":{"status":"ok","timestamp":1737098706800,"user_tz":-330,"elapsed":410,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"2e0ed4bb-2003-4572-af01-6523f221f906"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(   Customer_id     Product\n"," 0            1  Television\n"," 1            2          er\n"," 2            3     evision\n"," 3            4      Televi\n"," 4            5      Tesion\n"," 5            6        Teln,\n","    Customer_id       State\n"," 0            2  California\n"," 1            4  California\n"," 2            6       Texas\n"," 3            8       Texas)"]},"metadata":{},"execution_count":73}]},{"cell_type":"code","source":["inner_join=pd.merge(df1,df2,on='Customer_id',how='inner')\n","outter_join=pd.merge(df1,df2,on='Customer_id',how='outer')\n","outter_join,inner_join"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YrHjPlUNJuBS","executionInfo":{"status":"ok","timestamp":1737098720045,"user_tz":-330,"elapsed":395,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"02f0c2ec-a42a-4d28-8794-2e03efac12e7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(   Customer_id     Product       State\n"," 0            1  Television         NaN\n"," 1            2          er  California\n"," 2            3     evision         NaN\n"," 3            4      Televi  California\n"," 4            5      Tesion         NaN\n"," 5            6        Teln       Texas\n"," 6            8         NaN       Texas,\n","    Customer_id Product       State\n"," 0            2      er  California\n"," 1            4  Televi  California\n"," 2            6    Teln       Texas)"]},"metadata":{},"execution_count":74}]},{"cell_type":"code","source":["#left_join=pd.merge(df1,df2,on='Customer_id',how='left')\n","right_join=pd.merge(df1,df2,on='Customer_id',how='right')\n","#left_join\n","right_join"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":174},"id":"9BvOR6twJy0L","executionInfo":{"status":"ok","timestamp":1737098738524,"user_tz":-330,"elapsed":420,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"9236d1ae-9c15-46aa-f5e8-caf9b1eb286c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Customer_id Product       State\n","0            2      er  California\n","1            4  Televi  California\n","2            6    Teln       Texas\n","3            8     NaN       Texas"],"text/html":["\n","  <div id=\"df-fe72f624-5de5-4ac3-852b-1a3c52754b5a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Customer_id</th>\n","      <th>Product</th>\n","      <th>State</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2</td>\n","      <td>er</td>\n","      <td>California</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4</td>\n","      <td>Televi</td>\n","      <td>California</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>6</td>\n","      <td>Teln</td>\n","      <td>Texas</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>8</td>\n","      <td>NaN</td>\n","      <td>Texas</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fe72f624-5de5-4ac3-852b-1a3c52754b5a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fe72f624-5de5-4ac3-852b-1a3c52754b5a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fe72f624-5de5-4ac3-852b-1a3c52754b5a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b10f40f6-969a-482c-a3cb-7187b5b9baad\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b10f40f6-969a-482c-a3cb-7187b5b9baad')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b10f40f6-969a-482c-a3cb-7187b5b9baad button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_d994d760-3b66-4b11-9f2b-4d230fa23053\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('right_join')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_d994d760-3b66-4b11-9f2b-4d230fa23053 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('right_join');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"right_join","summary":"{\n  \"name\": \"right_join\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Customer_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2,\n        \"max\": 8,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4,\n          8,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Product\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"er\",\n          \"Televi\",\n          \"Teln\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Texas\",\n          \"California\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":75}]},{"cell_type":"code","source":["import pandas as pd\n","data = pd.DataFrame({'Brand':['BMW','BENZ','RANGE ROVER','ROYCE','BUGGATI','RANGE ROVER','BMW','TATA','KIA'],'Year':[2012,2014,2011,2015,2012,2016,2014,2018,2019],'Kms_driven':[50000,30000,60000,25000,10000,46000,31000,15000,12000],'City':['Hyderabad','Delhi','Mumbai','Delhi','Mumbai','Delhi','Mumbai','Hyderabad','Bengalore'],'Mileage':[28,27,29,45,46,38,29,41,48]})\n","display(data)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":331},"id":"lnImUk7FuTdF","executionInfo":{"status":"ok","timestamp":1737176319681,"user_tz":-330,"elapsed":443,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"372bbd70-8d06-466b-8332-e672766c71d0"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["         Brand  Year  Kms_driven       City  Mileage\n","0          BMW  2012       50000  Hyderabad       28\n","1         BENZ  2014       30000      Delhi       27\n","2  RANGE ROVER  2011       60000     Mumbai       29\n","3        ROYCE  2015       25000      Delhi       45\n","4      BUGGATI  2012       10000     Mumbai       46\n","5  RANGE ROVER  2016       46000      Delhi       38\n","6          BMW  2014       31000     Mumbai       29\n","7         TATA  2018       15000  Hyderabad       41\n","8          KIA  2019       12000  Bengalore       48"],"text/html":["\n","  <div id=\"df-46a8064f-bd15-4bda-a627-378353539cbb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Brand</th>\n","      <th>Year</th>\n","      <th>Kms_driven</th>\n","      <th>City</th>\n","      <th>Mileage</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>BMW</td>\n","      <td>2012</td>\n","      <td>50000</td>\n","      <td>Hyderabad</td>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>BENZ</td>\n","      <td>2014</td>\n","      <td>30000</td>\n","      <td>Delhi</td>\n","      <td>27</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>RANGE ROVER</td>\n","      <td>2011</td>\n","      <td>60000</td>\n","      <td>Mumbai</td>\n","      <td>29</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ROYCE</td>\n","      <td>2015</td>\n","      <td>25000</td>\n","      <td>Delhi</td>\n","      <td>45</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>BUGGATI</td>\n","      <td>2012</td>\n","      <td>10000</td>\n","      <td>Mumbai</td>\n","      <td>46</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>RANGE ROVER</td>\n","      <td>2016</td>\n","      <td>46000</td>\n","      <td>Delhi</td>\n","      <td>38</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>BMW</td>\n","      <td>2014</td>\n","      <td>31000</td>\n","      <td>Mumbai</td>\n","      <td>29</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>TATA</td>\n","      <td>2018</td>\n","      <td>15000</td>\n","      <td>Hyderabad</td>\n","      <td>41</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>KIA</td>\n","      <td>2019</td>\n","      <td>12000</td>\n","      <td>Bengalore</td>\n","      <td>48</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-46a8064f-bd15-4bda-a627-378353539cbb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-46a8064f-bd15-4bda-a627-378353539cbb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-46a8064f-bd15-4bda-a627-378353539cbb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d22d2c48-37a7-4bc5-a014-0a1adfba4c05\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d22d2c48-37a7-4bc5-a014-0a1adfba4c05')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d22d2c48-37a7-4bc5-a014-0a1adfba4c05 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_2f15dbf9-ca8c-439b-9e3d-24342eccd976\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_2f15dbf9-ca8c-439b-9e3d-24342eccd976 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 9,\n  \"fields\": [\n    {\n      \"column\": \"Brand\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"BMW\",\n          \"BENZ\",\n          \"TATA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2011,\n        \"max\": 2019,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          2012,\n          2014,\n          2018\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kms_driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17755,\n        \"min\": 10000,\n        \"max\": 60000,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          15000,\n          30000,\n          46000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Delhi\",\n          \"Bengalore\",\n          \"Hyderabad\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 27,\n        \"max\": 48,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          27,\n          38,\n          28\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"code","source":["display(data.loc[(data.City == 'Delhi') & (data.Kms_driven >30000)])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"fIXUsgtYxOCP","executionInfo":{"status":"ok","timestamp":1737176336520,"user_tz":-330,"elapsed":638,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"a413cb80-f3ed-40bd-bdd8-3fd70431af65"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["         Brand  Year  Kms_driven   City  Mileage\n","5  RANGE ROVER  2016       46000  Delhi       38"],"text/html":["\n","  <div id=\"df-5e9b4c45-ffc5-484b-9066-5ea82d212dbb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Brand</th>\n","      <th>Year</th>\n","      <th>Kms_driven</th>\n","      <th>City</th>\n","      <th>Mileage</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>5</th>\n","      <td>RANGE ROVER</td>\n","      <td>2016</td>\n","      <td>46000</td>\n","      <td>Delhi</td>\n","      <td>38</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5e9b4c45-ffc5-484b-9066-5ea82d212dbb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5e9b4c45-ffc5-484b-9066-5ea82d212dbb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5e9b4c45-ffc5-484b-9066-5ea82d212dbb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(data\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Brand\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"RANGE ROVER\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2016,\n        \"max\": 2016,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2016\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kms_driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 46000,\n        \"max\": 46000,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          46000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Delhi\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 38,\n        \"max\": 38,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          38\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"Lbv63Cb7x5Ky"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","sales_data = {\n","    'TransactionID' : [1, 2, 3, 4, 5],\n","    'CustomerID' : [101, 102, 103, 104, 105],\n","    'Amount':[250, 300, 400, 500, 600],\n","    'Date' : ['2025-01-01', '2025-01-02', '2025-01-03', '2025-01-04', '2025-01-05']\n","}\n","customer_data = {\n","    'CustomerID' : [101, 102, 103, 104],\n","    'CustomerName' : ['John', 'Alice', 'Bob', 'Eve'],\n","    'Age' : [20,45, 30, 24],\n","    'City' : ['New York', 'Paris', 'London', 'Sydney']\n","}\n","sales_df = pd.DataFrame(sales_data)\n","customer_df = pd.DataFrame(customer_data)\n","print(\"Sales Data: \")\n","print(sales_df)\n","print(\"\\nCustomer Data: \")\n","print(customer_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BQXLMf1cbDDO","executionInfo":{"status":"ok","timestamp":1737356075160,"user_tz":-330,"elapsed":8513,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"56e23cd7-32c2-4b18-c0ee-504c67928ebe"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Sales Data: \n","   TransactionID  CustomerID  Amount        Date\n","0              1         101     250  2025-01-01\n","1              2         102     300  2025-01-02\n","2              3         103     400  2025-01-03\n","3              4         104     500  2025-01-04\n","4              5         105     600  2025-01-05\n","\n","Customer Data: \n","   CustomerID CustomerName  Age      City\n","0         101         John   20  New York\n","1         102        Alice   45     Paris\n","2         103          Bob   30    London\n","3         104          Eve   24    Sydney\n"]}]},{"cell_type":"code","source":["#exploring the dataset(using shape and describe)\n","print(\"Sales shape: \",sales_df.shape)\n","print(\"Sales describe: \\n\",sales_df.describe())\n","print(\"\\nCustomer shape: \",customer_df.shape)\n","print(\"Customer describe: \\n\",customer_df.describe())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1PeXKevff-xd","executionInfo":{"status":"ok","timestamp":1737356539956,"user_tz":-330,"elapsed":470,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"a4010043-9070-47b9-99bc-05f7d287b47c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Sales shape:  (5, 4)\n","Sales describe: \n","        TransactionID  CustomerID      Amount\n","count       5.000000    5.000000    5.000000\n","mean        3.000000  103.000000  410.000000\n","std         1.581139    1.581139  143.178211\n","min         1.000000  101.000000  250.000000\n","25%         2.000000  102.000000  300.000000\n","50%         3.000000  103.000000  400.000000\n","75%         4.000000  104.000000  500.000000\n","max         5.000000  105.000000  600.000000\n","\n","Customer shape:  (4, 4)\n","Customer describe: \n","        CustomerID        Age\n","count    4.000000   4.000000\n","mean   102.500000  29.750000\n","std      1.290994  10.965856\n","min    101.000000  20.000000\n","25%    101.750000  23.000000\n","50%    102.500000  27.000000\n","75%    103.250000  33.750000\n","max    104.000000  45.000000\n"]}]},{"cell_type":"code","source":["print(sales_df.dropna())\n","print(customer_df.dropna())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pY3L1uRVmD1n","executionInfo":{"status":"ok","timestamp":1737358122704,"user_tz":-330,"elapsed":502,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"18c1c9e6-6fb2-43d9-db66-aa5012da6b05"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   TransactionID  CustomerID  Amount        Date\n","0              1         101     250  2025-01-01\n","1              2         102     300  2025-01-02\n","2              3         103     400  2025-01-03\n","3              4         104     500  2025-01-04\n","4              5         105     600  2025-01-05\n","   CustomerID CustomerName  Age      City\n","0         101         John   20  New York\n","1         102        Alice   45     Paris\n","2         103          Bob   30    London\n","3         104          Eve   24    Sydney\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","Patient_info = {\n","    'Patient_Name' : ['John', 'Alice', 'Bob', 'Eve'],\n","    'Age' : [2, 6, 7,4],\n","    'Date_of_appointment' : ['06-01-2025','08-01-2025','10-01-2025','12-01-2025'],\n","    'Patient_id' : ['001','002','003','004']\n","}\n","Patient_df = pd.DataFrame(Patient_info)\n","print(\"Patient Data: \")\n","print(Patient_df)\n","\n","drug_quantity = {\n","    'drug_name' : ['dolo650','paracetamol','myospas','sinarest'],\n","    'quantity' : [100, 200, 300, 400],\n","    'Patient_id' : ['002','004','005','006']\n","}\n","drug_df = pd.DataFrame(drug_quantity)\n","print(\"\\nDrug Data: \")\n","print(drug_df)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b1vyWswdMGyC","executionInfo":{"status":"ok","timestamp":1737389959415,"user_tz":-330,"elapsed":1586,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"6b4a6986-c7ee-4ec0-a530-07a709b674f5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Patient Data: \n","  Patient_Name  Age Date_of_appointment Patient_id\n","0         John    2          06-01-2025        001\n","1        Alice    6          08-01-2025        002\n","2          Bob    7          10-01-2025        003\n","3          Eve    4          12-01-2025        004\n","\n","Drug Data: \n","     drug_name  quantity Patient_id\n","0      dolo650       100        002\n","1  paracetamol       200        004\n","2      myospas       300        005\n","3     sinarest       400        006\n"]}]},{"cell_type":"code","source":["display(Patient_df.merge(drug_df,on='Patient_id',how='inner'))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":112},"id":"SeWdsKSVOBT-","executionInfo":{"status":"ok","timestamp":1737389964501,"user_tz":-330,"elapsed":11,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"6091625d-cb3f-4f64-d74e-6beef225754f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["  Patient_Name  Age Date_of_appointment Patient_id    drug_name  quantity\n","0        Alice    6          08-01-2025        002      dolo650       100\n","1          Eve    4          12-01-2025        004  paracetamol       200"],"text/html":["\n","  <div id=\"df-01f2baf1-7480-4d0f-b843-e397a6612904\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Patient_Name</th>\n","      <th>Age</th>\n","      <th>Date_of_appointment</th>\n","      <th>Patient_id</th>\n","      <th>drug_name</th>\n","      <th>quantity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Alice</td>\n","      <td>6</td>\n","      <td>08-01-2025</td>\n","      <td>002</td>\n","      <td>dolo650</td>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Eve</td>\n","      <td>4</td>\n","      <td>12-01-2025</td>\n","      <td>004</td>\n","      <td>paracetamol</td>\n","      <td>200</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-01f2baf1-7480-4d0f-b843-e397a6612904')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-01f2baf1-7480-4d0f-b843-e397a6612904 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-01f2baf1-7480-4d0f-b843-e397a6612904');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b386fec6-3f70-424f-8d56-7fcc0ff76c25\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b386fec6-3f70-424f-8d56-7fcc0ff76c25')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b386fec6-3f70-424f-8d56-7fcc0ff76c25 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(Patient_df\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Patient_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Eve\",\n          \"Alice\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 4,\n        \"max\": 6,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          4,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date_of_appointment\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"12-01-2025\",\n          \"08-01-2025\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Patient_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"004\",\n          \"002\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"drug_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"paracetamol\",\n          \"dolo650\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 70,\n        \"min\": 100,\n        \"max\": 200,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          200,\n          100\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"code","source":["display(Patient_df.loc[Patient_df['Age'] <6])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":112},"id":"5ff14Fi1OhIH","executionInfo":{"status":"ok","timestamp":1737389967367,"user_tz":-330,"elapsed":8,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"313f898c-24ae-4d7e-fff0-4683fbe8705a"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["  Patient_Name  Age Date_of_appointment Patient_id\n","0         John    2          06-01-2025        001\n","3          Eve    4          12-01-2025        004"],"text/html":["\n","  <div id=\"df-83e393f7-bdac-4b66-bf67-a9a8544cb71a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Patient_Name</th>\n","      <th>Age</th>\n","      <th>Date_of_appointment</th>\n","      <th>Patient_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>John</td>\n","      <td>2</td>\n","      <td>06-01-2025</td>\n","      <td>001</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Eve</td>\n","      <td>4</td>\n","      <td>12-01-2025</td>\n","      <td>004</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-83e393f7-bdac-4b66-bf67-a9a8544cb71a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-83e393f7-bdac-4b66-bf67-a9a8544cb71a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-83e393f7-bdac-4b66-bf67-a9a8544cb71a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ea4d7c9a-f7b3-4ac6-a2cd-e6df72c13d84\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ea4d7c9a-f7b3-4ac6-a2cd-e6df72c13d84')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ea4d7c9a-f7b3-4ac6-a2cd-e6df72c13d84 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(Patient_df\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Patient_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Eve\",\n          \"John\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 4,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          4,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date_of_appointment\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"12-01-2025\",\n          \"06-01-2025\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Patient_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"004\",\n          \"001\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"code","source":["import numpy as np\n","arr = np.array([[1,2,3,4,5],[6,7,8,9,10],[2,12,14,16,24]])\n","print(arr)\n","print('4th element on 1nd row: ',arr[1,3])\n","print('3rd element on 0th row: ',arr[0,3])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3U7t7q3-nlD7","executionInfo":{"status":"ok","timestamp":1737443272964,"user_tz":-330,"elapsed":598,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"2c740522-5752-4da9-a85b-224f0a701779"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 1  2  3  4  5]\n"," [ 6  7  8  9 10]\n"," [ 2 12 14 16 24]]\n","4th element on 1nd row:  9\n","3rd element on 0th row:  4\n"]}]},{"cell_type":"code","source":["import numpy as np\n","arr = np.array([[[1,2,3,4,5],[6,7,8,9,10]],[[2,12,14,16,24],[10,20,30,40,50]]])\n","print(arr)\n","print(arr[1,1,2])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PX4FutYCp8n8","executionInfo":{"status":"ok","timestamp":1737443347444,"user_tz":-330,"elapsed":607,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"e05e2101-e6f9-4886-cbec-8a144dae7854"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[[ 1  2  3  4  5]\n","  [ 6  7  8  9 10]]\n","\n"," [[ 2 12 14 16 24]\n","  [10 20 30 40 50]]]\n","30\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","Patient_info = {\n","    'Patient_Name' : ['John', 'Alice', 'Bob', 'Eve'],\n","    'Age' : [2, 6, 7,4],\n","    'Date_of_appointment' : ['06-01-2025','08-01-2025','10-01-2025','12-01-2025'],\n","    'Patient_id' : ['001','002','003','004']\n","}\n","Patient_df = pd.DataFrame(Patient_info)\n","print(\"Patient Data: \")\n","print(Patient_df)\n","\n","drug_quantity = {\n","    'drug_name' : ['dolo650','paracetamol','myospas','sinarest'],\n","    'quantity' : [100, 200, 300, 400],\n","    'Patient_id' : ['002','004','005','006']\n","}\n","drug_df = pd.DataFrame(drug_quantity)\n","print(\"\\nDrug Data: \")\n","print(drug_df)\n","\n","display(Patient_df.merge(drug_df,on='Patient_id',how='inner'))\n","\n","display(Patient_df.loc[Patient_df['Age'] <6])"],"metadata":{"id":"Jl7PfsXwsjFl","colab":{"base_uri":"https://localhost:8080/","height":432},"executionInfo":{"status":"ok","timestamp":1737444309049,"user_tz":-330,"elapsed":552,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"dfebddf2-e793-405b-f3b5-efab5e8f9aec"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Patient Data: \n","  Patient_Name  Age Date_of_appointment Patient_id\n","0         John    2          06-01-2025        001\n","1        Alice    6          08-01-2025        002\n","2          Bob    7          10-01-2025        003\n","3          Eve    4          12-01-2025        004\n","\n","Drug Data: \n","     drug_name  quantity Patient_id\n","0      dolo650       100        002\n","1  paracetamol       200        004\n","2      myospas       300        005\n","3     sinarest       400        006\n"]},{"output_type":"display_data","data":{"text/plain":["  Patient_Name  Age Date_of_appointment Patient_id    drug_name  quantity\n","0        Alice    6          08-01-2025        002      dolo650       100\n","1          Eve    4          12-01-2025        004  paracetamol       200"],"text/html":["\n","  <div id=\"df-95db1bb3-1267-4c53-a6e9-872d7870d69c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Patient_Name</th>\n","      <th>Age</th>\n","      <th>Date_of_appointment</th>\n","      <th>Patient_id</th>\n","      <th>drug_name</th>\n","      <th>quantity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Alice</td>\n","      <td>6</td>\n","      <td>08-01-2025</td>\n","      <td>002</td>\n","      <td>dolo650</td>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Eve</td>\n","      <td>4</td>\n","      <td>12-01-2025</td>\n","      <td>004</td>\n","      <td>paracetamol</td>\n","      <td>200</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-95db1bb3-1267-4c53-a6e9-872d7870d69c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-95db1bb3-1267-4c53-a6e9-872d7870d69c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-95db1bb3-1267-4c53-a6e9-872d7870d69c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d2970a31-0e48-4369-b89b-230ce97aaa0c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d2970a31-0e48-4369-b89b-230ce97aaa0c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d2970a31-0e48-4369-b89b-230ce97aaa0c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(Patient_df\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Patient_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Eve\",\n          \"Alice\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 4,\n        \"max\": 6,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          4,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date_of_appointment\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"12-01-2025\",\n          \"08-01-2025\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Patient_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"004\",\n          \"002\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"drug_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"paracetamol\",\n          \"dolo650\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 70,\n        \"min\": 100,\n        \"max\": 200,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          200,\n          100\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["  Patient_Name  Age Date_of_appointment Patient_id\n","0         John    2          06-01-2025        001\n","3          Eve    4          12-01-2025        004"],"text/html":["\n","  <div id=\"df-552f8303-e72c-4a21-844b-14395da61a9b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Patient_Name</th>\n","      <th>Age</th>\n","      <th>Date_of_appointment</th>\n","      <th>Patient_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>John</td>\n","      <td>2</td>\n","      <td>06-01-2025</td>\n","      <td>001</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Eve</td>\n","      <td>4</td>\n","      <td>12-01-2025</td>\n","      <td>004</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-552f8303-e72c-4a21-844b-14395da61a9b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-552f8303-e72c-4a21-844b-14395da61a9b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-552f8303-e72c-4a21-844b-14395da61a9b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ea807d72-6ea0-42c8-8339-956aa1e586c4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ea807d72-6ea0-42c8-8339-956aa1e586c4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ea807d72-6ea0-42c8-8339-956aa1e586c4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(Patient_df\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Patient_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Eve\",\n          \"John\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 4,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          4,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date_of_appointment\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"12-01-2025\",\n          \"06-01-2025\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Patient_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"004\",\n          \"001\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","data = [5, 7, 7, 8, 9, 10, 10, 10, 11, 12, 11, 11]\n","plt.hist(data, bins=10, edgecolor ='black')\n","plt.title('Simple Histogram Example')\n","plt.xlabel('Numbers')\n","plt.ylabel('Count')\n","plt.show()"],"metadata":{"id":"ZGPeVbEFwou6","colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"status":"ok","timestamp":1737523312088,"user_tz":-330,"elapsed":1548,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"185ebf9e-1860-471f-810b-08b375529441"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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76h///7y9/eXn5+fGjZsqNdff11JSUmqXLmy/vnPf97X584U1q1bt/Tkk09q4MCBOnbsmD788EM98cQT6tevX77rDBkyRCtXrtRLL72kLVu26PHHH1d2draOHj2qlStXatOmTXk+7wUUBOEGyMNf//pXrVq1SuvXr9eiRYt069YteXt7609/+pPeeuut+/qsmAcVEhIiBwcHzZs3TxcuXFCHDh20YMECeXp63nW9P//5z2rSpIkiIyM1bdo0Sf97jqFnz553/UenqIwdO1br1q3TN998o8zMTPn4+Oidd97RhAkTrH2efvppvfLKK1q+fLmWLl0qwzD07LPPysHBQevWrdOUKVO0YsUKLV68WPXq1dPs2bNzfUXB559/Lg8PD/3973/XmjVrFBgYqBUrVsjX11cuLi73VeuyZcv0yiuvKCoqSoZhqGfPntqwYUOJfvVBfHy8hgwZkqvdx8dHwcHBWrdunT7//HPNmTNHfn5+1uVz585VbGyshg4dqr1798rJyUlfffWVxo4dq4iICLm4uOgPf/iDQkND5e/vXyy1L1iwQF9++aWmTJmirKwsDR48WPPnz79ruHRwcFBMTIwiIyP1+eefa82aNXrkkUfUoEEDjRs3zq63U2EeFqM4nnoDUGhnzpxR/fr1NXv27GK/ymI28fHxatOmjZYuXarnnnvO3uWY1pIlSzR8+HDt3buXqywolXjmBkCZdOdXCkj/e17GwcHhvj4ZGIB5cVsKQJk0a9Ys7d+/X926dVO5cuW0YcMGbdiwQS+88AJvJwYecoQbAGVSp06dFBsbq7ffflvp6eny9vbW1KlT9eabb9q7NAB2xjM3AADAVHjmBgAAmArhBgAAmMpD98xNTk6Ozp07p0qVKvHR3wAAlBGGYejatWuqXbu2HBzufm3moQs3586d450UAACUUYmJiapbt+5d+zx04eb2l/ElJiaqcuXKdq4GAADcj7S0NHl5edl8qW5+Hrpwc/tWVOXKlQk3AACUMffzSAkPFAMAAFMh3AAAAFMh3AAAAFMh3AAAAFMh3AAAAFMh3AAAAFMh3AAAAFMh3AAAAFMh3AAAAFMh3AAAAFOxa7hZuHChWrVqZf0qhICAAG3YsOGu66xatUp+fn5ycXFRy5YttX79+hKqFgAAlAV2DTd169bVzJkztX//fu3bt0/du3dX//79deTIkTz7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FmmB9xIfHy9PT898lzs7O8vZ2bkEKwIAAPZUqHDj5eWlAwcOaPPmzTp69KgkqWnTpgoMDCzQdtLT022uupw+fVrx8fGqVq2avL29NWnSJCUlJenzzz+XJM2bN0/169dX8+bNdfPmTX388cf69ttv9c033xRmGAAAwIQKFG6+/fZbhYaGateuXapcubJ69OihHj16SJKuXr2q5s2bKzo6Wr/73e/ua3v79u2z+VC+8ePHS5KGDh2qJUuW6Pz580pISLAuv3Xrll577TUlJSXpkUceUatWrbR58+Y8P9gPAAA8nAoUbubNm6fRo0fbfIDebW5ubnrxxRc1d+7c+w43Xbt2lWEY+S5fsmSJzfzEiRM1ceLEgpQMAAAeMgV6oPiHH35Qr1698l3es2dP7d+//4GLAgAAKKwChZuUlJQ83wJ+W7ly5fTLL788cFEAAACFVaBwU6dOHR0+fDjf5f/5z3/u+s4lAACA4lagcPP73/9ekydP1s2bN3Mtu3HjhsLDw/XUU08VWXEAAAAFVaAHit966y2tXr1aTZo0UWhoqPXTgo8ePaqoqChlZ2frzTffLJZCAQAA7keBwo27u7t27Nihl19+WZMmTbK+08lisSgoKEhRUVFyd3cvlkIBAADuR4E/xM/Hx0fr16/X5cuXdfLkSRmGocaNG6tq1arFUR8AAECBFOoTiiWpatWqat++fVHWAgAA8MAK9cWZAAAApRXhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmArhBgAAmIpdw822bdvUt29f1a5dWxaLRTExMfdcZ+vWrXr00Ufl7OysRo0aacmSJcVeJwAAKDvsGm4yMjLk7++vqKio++p/+vRp9enTR926dVN8fLzCwsI0atQobdq0qZgrBQAAZUU5e+68d+/e6t279333j46OVv369TVnzhxJ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\n"},"metadata":{}}]},{"cell_type":"code","source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","datf = pd.DataFrame({\"Season 1\": [7, 4, 5, 6, 3],\n","                     \"Season 2\": [1, 2, 8, 4, 9]})\n","p = sns.histplot(data = datf)\n","p.set(xlabel=\"X Label Value\", ylabel = \"Y Label Value\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"wz_vJrmhgFvH","executionInfo":{"status":"ok","timestamp":1737524492184,"user_tz":-330,"elapsed":3433,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"c07b8c93-2e66-4d2e-d3ab-1ec1ea3d91d1"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","np.random.seed(44)\n","data = np.random.randint(16, 80, 800)\n","plt.hist(data, bins=10, edgecolor ='black', color='skyblue')\n","plt.title('Histogram of Cancer Patients Age Distribution')\n","plt.xlabel('Age')\n","plt.ylabel('Number of Patients')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"s28u3DDRirKm","executionInfo":{"status":"ok","timestamp":1737525091727,"user_tz":-330,"elapsed":544,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"d09b33c2-7784-4116-abb8-40ef9106405a"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","data = {\n","    'semester': ['Sem 1', 'Sem 1', 'Sem 1', 'Sem 1', 'Sem 1', 'Sem 2', 'Sem 2', 'Sem 2', 'Sem 2', 'Sem 2'],\n","    'hours_studied' : [6,8,4,2,12,14,17,16,7,10]\n","}\n","df = pd.DataFrame(data)\n","plt.figure(figsize = (7,8))\n","sns.boxplot(x='semester', y='hours_studied', data=df)\n","plt.title('Student Perfomance: Hours Studied by Semester')\n","plt.xlabel('Semester')\n","plt.ylabel('Number of Hours Studied')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":718},"id":"4NxhgbtVmHJd","executionInfo":{"status":"ok","timestamp":1737526124164,"user_tz":-330,"elapsed":478,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"fe8c7945-5a87-411f-c35f-8e7919849fa0"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 700x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.impute import SimpleImputer\n","\n","data = {\n","    'square_feet_area': [8500, 8000, np.nan, 9000, 5000, 7500, 6000, 7000, 10000, 4000],\n","    'Year_built': [2004, 2006, 2009, 2002, np.nan, 2000, 2001, 2003, np.nan, 2007],\n","    'over_all_condition': [5, 4, 6, 7, np.nan, 8, 6, np.nan, 7, 4],\n","    'ready_to_move': ['yes', 'yes', 'yes', np.nan, 'no', 'yes', 'yes', 'yes', np.nan, 'yes'],\n","    'Sale_price': [200000, 180000, 190000, 160000, 150000, 185000, 175000, 170000, 195000, 165000]\n","}\n","df = pd.DataFrame(data)\n","print(\"Original DataFrame\")\n","print(df)\n","\n","df['square_feet_area'].fillna(df['square_feet_area'].mean(), inplace=True)\n","df['Year_built'].fillna(df['Year_built'].mean(), inplace=True)\n","df['over_all_condition'].fillna(df['over_all_condition'].mean(), inplace=True)\n","\n","\n","df['ready_to_move'].fillna(df['ready_to_move'].mode()[0], inplace=True)\n","\n","print(\"\\nDataFrame after filling missing values with mean (for numeric) and mode (for categorical)\")\n","print(df)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fkjDhDT7llOz","executionInfo":{"status":"ok","timestamp":1737611675887,"user_tz":-330,"elapsed":367,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"efad31b4-88f4-4eea-fb83-b721771417c9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Original DataFrame\n","   square_feet_area  Year_built  over_all_condition ready_to_move  Sale_price\n","0            8500.0      2004.0                 5.0           yes      200000\n","1            8000.0      2006.0                 4.0           yes      180000\n","2               NaN      2009.0                 6.0           yes      190000\n","3            9000.0      2002.0                 7.0           NaN      160000\n","4            5000.0         NaN                 NaN            no      150000\n","5            7500.0      2000.0                 8.0           yes      185000\n","6            6000.0      2001.0                 6.0           yes      175000\n","7            7000.0      2003.0                 NaN           yes      170000\n","8           10000.0         NaN                 7.0           NaN      195000\n","9            4000.0      2007.0                 4.0           yes      165000\n","\n","DataFrame after filling missing values with mean (for numeric) and mode (for categorical)\n","   square_feet_area  Year_built  over_all_condition ready_to_move  Sale_price\n","0       8500.000000      2004.0               5.000           yes      200000\n","1       8000.000000      2006.0               4.000           yes      180000\n","2       7222.222222      2009.0               6.000           yes      190000\n","3       9000.000000      2002.0               7.000           yes      160000\n","4       5000.000000      2004.0               5.875            no      150000\n","5       7500.000000      2000.0               8.000           yes      185000\n","6       6000.000000      2001.0               6.000           yes      175000\n","7       7000.000000      2003.0               5.875           yes      170000\n","8      10000.000000      2004.0               7.000           yes      195000\n","9       4000.000000      2007.0               4.000           yes      165000\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-4-df1ac469f973>:16: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['square_feet_area'].fillna(df['square_feet_area'].mean(), inplace=True)\n","<ipython-input-4-df1ac469f973>:17: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['Year_built'].fillna(df['Year_built'].mean(), inplace=True)\n","<ipython-input-4-df1ac469f973>:18: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['over_all_condition'].fillna(df['over_all_condition'].mean(), inplace=True)\n","<ipython-input-4-df1ac469f973>:21: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['ready_to_move'].fillna(df['ready_to_move'].mode()[0], inplace=True)\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.impute import SimpleImputer\n","\n","data = {\n","    'square_feet_area': [8500, 8000, np.nan, 9000, 5000, 7500, 6000, 7000, 10000, 4000],\n","    'Year_built': [2004, 2006, 2009, 2002, np.nan, 2000, 2001, 2003, np.nan, 2007],\n","    'over_all_condition': [5, 4, 6, 7, np.nan, 8, 6, np.nan, 7, 4],\n","    'ready_to_move': ['yes', 'yes', 'yes', np.nan, 'no', 'yes', 'yes', 'yes', np.nan, 'yes'],\n","    'Sale_price': [200000, 180000, 190000, 160000, 150000, 185000, 175000, 170000, 195000, 165000]\n","}\n","df = pd.DataFrame(data)\n","print(\"Original DataFrame\")\n","print(df)\n","\n","df['square_feet_area'].fillna(df['square_feet_area'].mean(), inplace=True)\n","df['Year_built'].fillna(df['Year_built'].mean(), inplace=True)\n","df['over_all_condition'].fillna(df['over_all_condition'].mean(), inplace=True)\n","\n","\n","df['ready_to_move'].fillna(df['ready_to_move'].mode()[0], inplace=True)\n","\n","print(\"\\nDataFrame after filling missing values with mean (for numeric) and mode (for categorical)\")\n","print(df)\n","\n","numeric_imputer = SimpleImputer(strategy='mean')\n","\n","df[['square_feet_area', 'Year_built', 'over_all_condition']] = numeric_imputer.fit_transform(df[['square_feet_area', 'Year_built', 'over_all_condition']])\n","categorical_imputer = SimpleImputer(strategy='most_frequent')\n","\n","print(\"\\nDataFrame after filling missing values with mean (for numeric) and mode (for categorical)\")\n","print(df)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zn3gOrk3vHN5","executionInfo":{"status":"ok","timestamp":1737612046379,"user_tz":-330,"elapsed":335,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"d985129c-e2fd-4ca5-a276-235fea3765d1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Original DataFrame\n","   square_feet_area  Year_built  over_all_condition ready_to_move  Sale_price\n","0            8500.0      2004.0                 5.0           yes      200000\n","1            8000.0      2006.0                 4.0           yes      180000\n","2               NaN      2009.0                 6.0           yes      190000\n","3            9000.0      2002.0                 7.0           NaN      160000\n","4            5000.0         NaN                 NaN            no      150000\n","5            7500.0      2000.0                 8.0           yes      185000\n","6            6000.0      2001.0                 6.0           yes      175000\n","7            7000.0      2003.0                 NaN           yes      170000\n","8           10000.0         NaN                 7.0           NaN      195000\n","9            4000.0      2007.0                 4.0           yes      165000\n","\n","DataFrame after filling missing values with mean (for numeric) and mode (for categorical)\n","   square_feet_area  Year_built  over_all_condition ready_to_move  Sale_price\n","0       8500.000000      2004.0               5.000           yes      200000\n","1       8000.000000      2006.0               4.000           yes      180000\n","2       7222.222222      2009.0               6.000           yes      190000\n","3       9000.000000      2002.0               7.000           yes      160000\n","4       5000.000000      2004.0               5.875            no      150000\n","5       7500.000000      2000.0               8.000           yes      185000\n","6       6000.000000      2001.0               6.000           yes      175000\n","7       7000.000000      2003.0               5.875           yes      170000\n","8      10000.000000      2004.0               7.000           yes      195000\n","9       4000.000000      2007.0               4.000           yes      165000\n","\n","DataFrame after filling missing values with mean (for numeric) and mode (for categorical)\n","   square_feet_area  Year_built  over_all_condition ready_to_move  Sale_price\n","0       8500.000000      2004.0               5.000           yes      200000\n","1       8000.000000      2006.0               4.000           yes      180000\n","2       7222.222222      2009.0               6.000           yes      190000\n","3       9000.000000      2002.0               7.000           yes      160000\n","4       5000.000000      2004.0               5.875            no      150000\n","5       7500.000000      2000.0               8.000           yes      185000\n","6       6000.000000      2001.0               6.000           yes      175000\n","7       7000.000000      2003.0               5.875           yes      170000\n","8      10000.000000      2004.0               7.000           yes      195000\n","9       4000.000000      2007.0               4.000           yes      165000\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-6-6a7c64469d40>:16: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['square_feet_area'].fillna(df['square_feet_area'].mean(), inplace=True)\n","<ipython-input-6-6a7c64469d40>:17: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['Year_built'].fillna(df['Year_built'].mean(), inplace=True)\n","<ipython-input-6-6a7c64469d40>:18: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['over_all_condition'].fillna(df['over_all_condition'].mean(), inplace=True)\n","<ipython-input-6-6a7c64469d40>:21: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['ready_to_move'].fillna(df['ready_to_move'].mode()[0], inplace=True)\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","np.random.seed(10)\n","data = pd.DataFrame({\n","    'value' : np.concatenate([np.random.normal(0, 1, 100), np.random.normal(10, 1, 10)])\n","})\n","Q1 = data['value'].quantile(0.25)\n","Q3 = data['value'].quantile(0.75)\n","IQR = Q3 - Q1\n","\n","lower_bound = Q1 - 1.5 * IQR\n","upper_bound = Q3 + 1.5 * IQR\n","\n","outliers = data[(data['value'] < lower_bound) | (data['value'] > upper_bound)]\n","\n","print(\"Outliers:\")\n","print(outliers)\n","\n","print(f\"Outliers based on Box Plot criteria:\\n{outliers}\")\n","plt.figure(figsize=(12, 6))\n","plt.subplot(1, 2, 1)\n","sns.boxplot(x=data['value'])\n","plt.title('Box Plot of Data')\n","plt.xlabel('Value')\n","plt.ylabel('Frequency')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":998},"id":"dIivQjpRkEZ9","executionInfo":{"status":"ok","timestamp":1737694690954,"user_tz":-330,"elapsed":458,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"d75b5a71-9c77-4844-a8c4-45ac6f264ca2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Outliers:\n","         value\n","100  10.117476\n","101   8.092543\n","102   9.077091\n","103  10.469751\n","104   9.855633\n","105   9.599862\n","106   9.704016\n","107  10.848209\n","108  10.706830\n","109   9.212731\n","Outliers based on Box Plot criteria:\n","         value\n","100  10.117476\n","101   8.092543\n","102   9.077091\n","103  10.469751\n","104   9.855633\n","105   9.599862\n","106   9.704016\n","107  10.848209\n","108  10.706830\n","109   9.212731\n"]},{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'Frequency')"]},"metadata":{},"execution_count":6},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import statistics\n","import numpy as np\n","stock_prices = [100, 96, 98, 94, 93, 90, 95,97,93,91]\n","variance = statistics.variance(stock_prices)\n","print(f\"Variance of Stock Prices: {variance}\")\n","numpy_variance = np.var(stock_prices, ddof=1)\n","print(f\"Variance of stock prices (using Numpy): {numpy_variance}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uPCA4JrippJd","executionInfo":{"status":"ok","timestamp":1737778760020,"user_tz":-330,"elapsed":7,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"a9ce15ad-12fc-4c82-d2d0-67cf22479806"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Variance of Stock Prices: 9.78888888888889\n","Variance of stock prices (using Numpy): 9.788888888888891\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","data = {\n","    'Temperature': [24,20,25,26,28,21,30,44,42,48],\n","    'Humidity': [65,60,72,78,76,80,64,68,74,70],\n","    'Wind Speed':[15,10,14,16,18,20,28,24,22,26],\n","    'Pressure' : [1010, 1016, 1012, 1014, 1018, 1024, 1022, 1028,1013, 1017]\n","}\n","df = pd.DataFrame(data)\n","plt.figure(figsize=(8, 6))\n","plt.scatter(df['Temperature'], df['Humidity'], color='blue', label='Temp vs Humidity')\n","plt.title('Temperature vs Humidity', fontsize = 14)\n","plt.xlabel(\"Temperature \", fontsize =12)\n","plt.ylabel(\"Humidity\", fontsize = 12)\n","plt.grid(True)\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":510},"id":"31odSdPNw168","executionInfo":{"status":"ok","timestamp":1737780750863,"user_tz":-330,"elapsed":1226,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"19be7189-d5e6-4cc1-9ccf-9f1b6f28ac90"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.preprocessing import MinMaxScaler\n","data = {\n","    \"age\": [25, 30, 35, 40, 45],\n","    \"height\": [150, 170, 180, 160, 200],\n","    \"weight\": [60, 70, 80, 75, 90]\n","}\n","df = pd.DataFrame(data)\n","print(\"Original Data: \")\n","print(df)\n","scaler = MinMaxScaler()\n","normalized_data = scaler.fit_transform(df)\n","normalized_df = pd.DataFrame(normalized_data, columns=df.columns)\n","print(\"\\nNormalized Data (scaled to range [0, 1]): \")\n","print(normalized_df)\n","standardized_data = (df - df.mean()) / df.std()\n","standardized_df = pd.DataFrame(standardized_data, columns=df.columns)\n","print(\"\\nStandardized Data (mean = 0, std = 1): \")\n","print(standardized_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s7dZyXxEka6u","executionInfo":{"status":"ok","timestamp":1737962143795,"user_tz":-330,"elapsed":674,"user":{"displayName":"jayesh kanchibhotla","userId":"00906061307363456709"}},"outputId":"31e362d0-ed44-487e-c55e-959a2ec7b667"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Original Data: \n","   age  height  weight\n","0   25     150      60\n","1   30     170      70\n","2   35     180      80\n","3   40     160      75\n","4   45     200      90\n","\n","Normalized Data (scaled to range [0, 1]): \n","    age  height    weight\n","0  0.00     0.0  0.000000\n","1  0.25     0.4  0.333333\n","2  0.50     0.6  0.666667\n","3  0.75     0.2  0.500000\n","4  1.00     1.0  1.000000\n","\n","Standardized Data (mean = 0, std = 1): \n","        age    height    weight\n","0 -1.264911 -1.143726 -1.341641\n","1 -0.632456 -0.103975 -0.447214\n","2  0.000000  0.415900  0.447214\n","3  0.632456 -0.623850  0.000000\n","4  1.264911  1.455651  1.341641\n"]}]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP9YwEnDw9/8aJptxWKStRV"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}